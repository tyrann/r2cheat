### radar2 cheat sheet ###

### Write commands ###

wx:						Write hex values in current offset
							wx 123456
							wx ff @ 4
wa: 					Write assembly #Notes: Use this to modify instructions 
							wa jnz 0x400d24
wc: 					Write cache commit
wv: 					Writes value doing endian conversion and padding to byte
wo[x]:					Write result of operation
							wow 11223344 @102!10
								write looped value from 102 to 102+10
								0x00000066  1122 3344 1122 3344 1122 0000 0000 0000
							wox 0x90
								XOR the current block with 0x90. Equivalent to wox 0x90 $$!$b (write from current position, a whole block)
							wox 67 @4!10
								XOR from offset 4 to 10 with value 67
wf file:				Writes the content of the file at the current address or specified offset (ASCII characters only)
wF file:				Writes the content of the file at the current address or specified offset
wt file [sz]:			Write to file (from current seek, blocksize or sz bytes)
							Eg: Dump ELF files with wt @@ hit0* (after searching for ELF headers: \x7fELF)
wopO 41424344 :			get the index in the De Bruijn Pattern of the given word

#======================================================================================================#

### Function analysis (normal mode) ###

aa:						Analyze all (fcns + bbs) same that running r2 with -A
ahl <length> <range>:	fake opcode length for a range of bytes
ad: 					Analyze data
							ad@rsp (analyze the stack)

af:						Analyze functions
afl:					List all functions
							number of functions: afl~?
afi:					Returns information about the functions we are currently at
afr:					Rename function: structure and flag
afr off:				Restore function name set by r2
afn:					Rename function
							afn strlen 0x080483f0
af-:					Removes metadata generated by the function analysis
af+:					Define a function manually given the start address and length
							af+ 0xd6f 403 checker_loop
axt:					Returns cross references to (xref to)
axf:					Returns cross references from (xref from)

#======================================================================================================#

### Information ###

iI:						File info
iz:	 					Strings in data section
izz:					Strings in the whole binary
iS:	 					Sections
    						iS~w returns writable sections
is:	 					Symbols
    						is~FUNC exports
il:	 					Linked libraries
ii:	 					Imports
ie:	 					Entrypoint

#======================================================================================================#

### Debug commands ###

db[?]                   Breakpoints commands
dbt[?]                  Display backtrace based on dbg.btdepth and dbg.btalgo
dc[?]                   Continue execution
dd[?]                   File descriptors (!fd in r1)
de[-sc] [rwx] [rm] [e]  Debug with ESIL (see de?)
dg <file>               Generate a core-file (WIP)
dH [handler]            Transplant process to a new handler
di[?]                   Show debugger backend information (See dh)
dk[?]                   List, send, get, set, signal handlers of child
dL [handler]            List or set debugger handler
dm[?]                   Show memory maps
do[?]                   Open process (reload, alias for 'oo')
doo[args]               Reopen in debugger mode with args (alias for 'ood')
dp[?]                   List, attach to process or thread id
dr[?]                   Cpu registers
ds[?]                   Step, over, source line
dt[?]                   Display instruction traces (dtr=reset)
dw <pid>                Block prompt until pid dies
dx[?]                   Inject and run code on target process (See gs)

#  Save breakpoints
db* > bps
# Load breakpoints
. bpd

#======================================================================================================#

### Reload commands ###

oo						reopen current file (kill+fork in debugger)
oo+                		reopen current file in read-write
ood[args]		   		reload binary with debug (keeps breakpoints) with args


#======================================================================================================#

### ROP commands ###


/R opcodes:				Search opcodes
							/R pop,pop,ret
/Rl opcodes:			Search opcodes and print them in linear way
							/Rl jmp eax,call ebx
/a:						Search assembly
							/a jmp eax
pda:					Returns a library of gadgets that can be use. 
						These gadgets are obtained by disassembling byte per byte instead of obeying to opcode length


#======================================================================================================#

### Visual mode ###

V enters visual mode

q:						 Exits visual mode
hjkl:					 move around (or HJKL) (left-down-up-right)
o:						 go/seek to given offset
?:						 Help
.:						 Seek EIP
<enter>:				 Follow address of the current jump/call
:cmd:					 Enter radare commands. Eg: x @ esi
d[f?]:					 Define cursor as a string, data, code, a function, or simply to undefine it.
	dr:					 Rename a function
	df:					 Define a function
v:						 Get into the visual code analysis menu to edit/look closely at the current function.
p/P:					 Rotate print (visualization) modes
							hex, the hexadecimal view
    						disasm, the disassembly listing
								Use numbers in [] to follow jump
								Use "u" to go back
    						debug, the debugger
    						words, the word-hexidecimal view
    						buf, the C-formatted buffer
    						annotated, the annotated hexdump.
c:						 Changes to cursor mode or exits the cursor mode
    select:			     Shift+[hjkl]
    i:					 Insert mode
    a:					 assembly inline
    A:					 Assembly in visual mode
    y:					 Copy
    Y:					 Paste
    f:					 Creates a flag where cursor points to
    <tab> in the hexdump view to toggle between hex and strings columns

V:						 View ascii-art basic block graph of current function
W:						 WebUI
x, X:						 XREFs to current function. ("u" to go back)
t:						 track flags (browse symbols, functions..)
gG:						 Begging or end of file
HUD
						 _ Show HUD
						 backspace: Exits HUD
						 We can add new commands to HUD in: radare2/shlr/hud/main
;[-]cmt:				 Add/remove comment
m<char>: 				 Define a bookmark
'<char>: 				 Go to previously defined bookmark

#======================================================================================================#

### rarun2 commands ###

r2 -b 32 -d rarun2 program=pwn1 arg1=$(ragg2 -P 300 -r) :	
									runs pwn1 with a De Bruijn Pattern as first argument, inside radare2's debugger, and force 32 bits
r2 -d rarun2 program=/bin/ls stdin=$(python exploit.py) : 
									runs /bin/ls with the output of exploit.py directed to stdin
